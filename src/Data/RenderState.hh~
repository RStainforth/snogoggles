////////////////////////////////////////////////////////////////////////
/// \class Viewer::Drawable
///
/// \brief   Interface class for all drawable objects
///
/// \author  Phil Jones <p.g.jones@qmul.ac.uk>
///
/// REVISION HISTORY:\n
///     18/02/12 : P.Jones - New file, first revision \n
///
/// \detail  This class defines the API needed to be drawn, accept events 
///          and initialise from a configuration table. 
///
////////////////////////////////////////////////////////////////////////

#ifndef __Viewer_Drawable__
#define __Viewer_Drawable__

THIS IS A GUIDE ONLY

namespace sf
{
  class Event;
  class RenderWindow;
  template T
  class Vector2<T>;
}

namespace Viewer
{
  class RWWrapper;
  class ConfigurationTable;
  class RenderState;
  class Event;

class Drawable
{
public:
  /// Deal with a new UI event
  virtual void NewEvent( const Event& event ) = 0;
  /// The event loop
  virtual void EventLoop() = 0;
  /// Save the current configuration
  virtual void SaveConfiguration( ConfigurationTable& configTable ) = 0;
  /// Initialise without a configuration
  virtual void Initialise() = 0;
  /// Load a configuration
  virtual void LoadConfiguration( ConfigurationTable& configTable ) = 0;
  /// Render all 2d objects
  virtual void Render2d( RWWrapper& renderApp, const RenderState& renderState ) = 0;
  /// Render all 3d objects
  virtual void Render3d( RWWrapper& renderApp, const RenderState& renderState ) = 0;
  /// Render the GUI objects
  virtual void RenderGUI( RWWrapper& renderApp, const RenderState& renderState ) = 0;
  /// Ask if object contains a point
  virtual bool ContainsPoint( const sf::Vector2<double>& point ) = 0;
};

} //::Viewer

#endif
