#!/bin/bash
# Define all functions

# Sets the variable to the one specified by the user.
# Parameters
#	1 - Variable Name
#	2 - Default Value
#	3 - Description

function set_param {

	echo "Variable Name: $1"
	echo $3
	echo "Current Value: $2"
	echo -n "New Value (Enter to keep current value): "

	read return_value

	if [ -z "$return_value" ]; then
		return_value=$2
	fi

	echo "Variable Is Set To : $return_value"
	echo ""

}

# Tests whether the specified file exists in the directory.
# Used to verify whether the locations of the packages are accurate.
# Parameters
#	1 - Package name
#	2 - Directory
#	3 - File

function check_package_terminate {

	echo -n "Checking whether $1 is configured properly... "
	if [ -f $2/$3 ]; then
		echo "Success!"
	else
		echo ""
		echo ""
		echo "ERROR: $1 does not contain $3."
		echo "       Package does not exist at this location : \"$2\"."
		echo "       Terminating configure. No files created."
		exit 1
	fi

}

# This is the "main function"

echo "Starting configure script for SNOGoggles..."
echo " "
echo -n "Would you like to set snocave libraries individually? [No]: "
read SET_NOT_SNOCAVE
echo " "

GLEWROOT=/usr

if [ "$SET_NOT_SNOCAVE" = "Yes" ]; then

   set_param GEANT4ROOT "" "The home directory of Geant4."
   GEANT4ROOT=$return_value

   set_param ROOTSYS "" "The home directory of ROOT."
   ROOTSYS=$return_value

   set_param SCONSROOT "" "The home directory of SCons."
   SCONSROOT=$return_value

   set_param RATROOT "" "The home directory of RAT."
   RATROOT=$return_value

   set_param AVALANCHEROOT "" "The home directory of avalanche."
   AVALANCHEROOT=$return_value

   set_param ZEROMQROOT "" "The home director of ZeroMQ."
   ZEROMQROOT=$return_value

   set_param SFMLROOT "" "Path to the SFML directory."
   SFMLROOT=$return_value

   set_param XERCESCROOT "" "Path to the Xerces-C++ home directory."
   XERCESCROOT=$return_value

else

    set_param SNOCAVE_DIR "" "Path to the snocave directory."
    SNOCAVE_DIR=$return_value

    RATROOT=$SNOCAVE_DIR/rat
    GEANT4ROOT=$SNOCAVE_DIR/libraries/geant4.9.4.p01
    ROOTSYS=$SNOCAVE_DIR/libraries/root-5.32.00
    SCONSROOT=$SNOCAVE_DIR/libraries/scons-2.1.0
    AVALANCHEROOT=$SNOCAVE_DIR/libraries/avalanche
    ZEROMQROOT=$SNOCAVE_DIR/libraries/zeromq-2.1.11
	
    SFMLROOT=$SNOCAVE_DIR/libraries/sfml-2.0
    XERCESCROOT=$SNOCAVE_DIR/libraries/xerces-c-3.1.1

fi

echo "Testing to ensure that all packages exist at specified directories..."

check_package_terminate RAT $RATROOT include/RAT/DS/EV.hh
check_package_terminate Geant4 $GEANT4ROOT include/G4Event.hh

# Checks whether Geant4 has GDML_BUILD_ENABLED
if [ -f $GEANT4ROOT/include/G4GDMLParser.hh ]; then
	echo "     Geant4 also has the GDML parser built!"
else
	echo "     WARNING: Geant4 does not have the GDML parser built!"
	echo "              May cause compilation failure."
fi

check_package_terminate ROOT $ROOTSYS include/TVector3.h
check_package_terminate SCons $SCONSROOT scons.1
check_package_terminate SFML $SFMLROOT include/SFML/OpenGL.hpp
check_package_terminate Xerces-C++ $XERCESCROOT include/xercesc/dom/DOM.hpp
check_package_terminate GLEW $GLEWROOT include/GL/glew.h
check_package_terminate avalanche $AVALANCHEROOT lib/cpp/libavalanche.so
check_package_terminate ZeroMQ $ZEROMQROOT include/zmq.h

echo ""

# env.ssh
echo -n "Creating env.sh... "

rm -f env.sh
echo '####### SNOGoggles environment #######' > env.sh
echo ' ' >> env.sh
echo 'export VIEWERROOT='$PWD >> env.sh
echo ' ' >> env.sh
echo 'source '$GEANT4ROOT'/env.sh' >> env.sh
echo ' ' >> env.sh
echo 'export RATROOT='$RATROOT >> env.sh
echo 'export ROOTSYS='$ROOTSYS >> env.sh
echo 'export SFMLROOT='$SFMLROOT >> env.sh
echo 'export XERCESCROOT='$XERCESCROOT >> env.sh
echo 'export AVALANCHEROOT='$AVALANCHEROOT >> env.sh
echo 'export ZEROMQROOT='$ZEROMQROOT >> env.sh
echo 'export GLEWROOT='$GLEWROOT >> env.sh
echo ' ' >> env.sh
echo 'export PATH=$PATH:'$SCONSROOT'/script:$VIEWERROOT/bin' >> env.sh
echo 'export PYTHONPATH='$SCONSROOT'/engine:$VIEWERROOT/python' >> env.sh
echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOTSYS/lib:$SFMLROOT/lib:$XERCESCROOT/lib:$GLEWROOT/lib:$AVALANCHEROOT/lib/cpp:$ZEROMQROOT/lib' >> env.sh
echo ' ' >> env.sh

echo "Done."

# env.csh

echo -n "Creating env.csh... "

rm -f env.csh
echo '####### SNOGoggles environment #######' > env.csh
echo ' ' >> env.csh
echo 'setenv VIEWERROOT {$PWD}' >> env.csh
echo ' ' >> env.csh
echo 'source '$GEANT4ROOT'/env.csh' >> env.csh
echo ' ' >> env.csh
echo 'unsetenv RATROOT' >> env.csh
echo 'unsetenv ROOTSYS' >> env.csh
echo 'unsetenv SFMLROOT' >> env.csh
echo 'unsetenv XERCESCROOT' >> env.csh
echo 'unsetenv GLEWROOT' >> env.csh
echo 'unsetenv PYTHONPATH' >> env.csh
echo ' ' >> env.csh
echo 'setenv RATROOT '$RATROOT >> env.csh
echo 'setenv ROOTSYS '$ROOTSYS >> env.csh
echo 'setenv SFMLROOT '$SFMLROOT >> env.csh
echo 'setenv XERCESCROOT '$XERCESCROOT >> env.csh
echo 'setenv AVALANCHEROOT '$AVALANCHEROOT >> env.csh
echo 'setenv ZEROMQROOT '$ZEROMQROOT >> env.csh
echo 'setenv GLEWROOT '$GLEWROOT >> env.csh
echo ' ' >> env.csh
echo 'setenv PATH {$PATH}:'$SCONSROOT'/script:{$VIEWERROOT}/bin' >> env.csh
echo 'setenv PYTHONPATH '$SCONSROOT'/engine:{$VIEWERROOT}/python' >> env.csh
echo 'setenv LD_LIBRARY_PATH {$LD_LIBRARY_PATH}:{$ROOTSYS}/lib:{$SFMLROOT}/lib:{$XERCESCROOT}/lib:{$GLEWROOT}/lib:{$AVALANCHEROOT}/lib/cpp:{$ZEROMQROOT}/lib' >> env.csh
echo ' ' >> env.csh

echo "Done."

echo ""
echo "Configure complete!"



